/*
 * Copyright (C) 2005-2010 ManyDesigns srl.  All rights reserved.
 * http://www.manydesigns.com/
 *
 * Unless you have purchased a commercial license agreement from ManyDesigns srl,
 * the following license terms apply:
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * There are special exceptions to the terms and conditions of the GPL
 * as it is applied to this software. View the full text of the
 * exception in file OPEN-SOURCE-LICENSE.txt in the directory of this
 * software distribution.
 *
 * This program is distributed WITHOUT ANY WARRANTY; and without the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/gpl.txt
 * or write to:
 * Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330,
 * Boston, MA  02111-1307  USA
 *
 */

package com.manydesigns.elements.fields;

import com.manydesigns.elements.reflection.PropertyAccessor;
import com.manydesigns.elements.util.Util;
import com.manydesigns.elements.xml.XhtmlBuffer;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.InvocationTargetException;

/*
 * @author Paolo Predonzani     - paolo.predonzani@manydesigns.com
 * @author Angelo Lupo          - angelo.lupo@manydesigns.com
 * @author Giampiero Granatella - giampiero.granatella@manydesigns.com
 */
public class SelectField extends AbstractField {
    public static final String copyright =
            "Copyright (c) 2005-2010, ManyDesigns srl";

    protected OptionProvider optionProvider;
    protected int optionProviderIndex;

    protected String comboLabel;


    //**************************************************************************
    // Costruttori
    //**************************************************************************
    public SelectField(PropertyAccessor accessor) {
        this(accessor, null);
    }

    public SelectField(PropertyAccessor accessor, String prefix) {
        super(accessor, prefix);
    }

    //**************************************************************************
    // Implementazione di Component
    //**************************************************************************
    public void readFromRequest(HttpServletRequest req) {
        super.readFromRequest(req);

        if (mode.isView(immutable, autogenerated)) {
            return;
        }

        String stringValue = req.getParameter(inputName);
        Object value = Util.convertValue(stringValue, accessor.getType());
        optionProvider.setValue(optionProviderIndex, value);
    }

    public boolean validate() {
        if (mode.isView(immutable, autogenerated) || (mode.isBulk() && !bulkChecked)) {
            return true;
        }

        Object value = optionProvider.getValue(optionProviderIndex);
        if (required && value == null) {
            errors.add(getText("elements.error.field.required"));
            return false;
        }
        return true;
    }

    public void readFromObject(Object obj) {
        super.readFromObject(obj);
        try {
            Object value;
            if (obj == null) {
                value = null;
            } else {
                value = accessor.get(obj);
            }
            optionProvider.setValue(optionProviderIndex, value);
        } catch (IllegalAccessException e) {
            throw new Error(e);
        } catch (InvocationTargetException e) {
            throw new Error(e);
        }
    }

    public void writeToObject(Object obj) {
        Object value = optionProvider.getValue(optionProviderIndex);
        writeToObject(obj, value);
    }

    public void valueToXhtml(XhtmlBuffer xb) {
        if (mode.isView(immutable, autogenerated)) {
            valueToXhtmlView(xb);
        } else if (mode.isEdit()) {
            valueToXhtmlEdit(xb);
        } else if (mode.isPreview()) {
            valueToXhtmlPreview(xb);
        } else if (mode.isHidden()) {
            valueToXhtmlHidden(xb);
        } else {
            throw new IllegalStateException("Unknown mode: " + mode);
        }
    }

    private void valueToXhtmlEdit(XhtmlBuffer xb) {
        xb.openElement("select");
        xb.addAttribute("id", id);
        xb.addAttribute("name", inputName);

        Object objectValue = optionProvider.getValue(optionProviderIndex);

        boolean checked = (objectValue == null);
        xb.writeOption("", checked, comboLabel);

        for (Object option : optionProvider.getOptions(optionProviderIndex)) {
            String optionString =
                    (String) Util.convertValue(option, String.class);
            checked =  option.equals(objectValue);
            xb.writeOption(optionString, checked, optionString);
        }
        xb.closeElement("select");
    }

    public void valueToXhtmlPreview(XhtmlBuffer xb) {
        valueToXhtmlView(xb);
        valueToXhtmlHidden(xb);
    }

    private void valueToXhtmlHidden(XhtmlBuffer xb) {
        Object value = optionProvider.getValue(optionProviderIndex);
        String stringValue = (String) Util.convertValue(value, String.class);
        xb.writeInputHidden(inputName, stringValue);
    }

    public void valueToXhtmlView(XhtmlBuffer xb) {
        xb.openElement("div");
        xb.addAttribute("class", "value");
        xb.addAttribute("id", id);
        Object value = optionProvider.getValue(optionProviderIndex);
        String stringValue = (String) Util.convertValue(value, String.class);
        xb.write(stringValue);
        xb.closeElement("div");
    }

    //**************************************************************************
    // Getter/setter
    //**************************************************************************

    public OptionProvider getOptionProvider() {
        return optionProvider;
    }

    public void setOptionProvider(OptionProvider optionProvider) {
        this.optionProvider = optionProvider;
    }

    public int getOptionProviderIndex() {
        return optionProviderIndex;
    }

    public void setOptionProviderIndex(int optionProviderIndex) {
        this.optionProviderIndex = optionProviderIndex;
    }

    public String getComboLabel() {
        return comboLabel;
    }

    public void setComboLabel(String comboLabel) {
        this.comboLabel = comboLabel;
    }


}
