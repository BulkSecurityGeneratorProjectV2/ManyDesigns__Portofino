#CRUD
crud.notInUseCase=Object not found: {0}
crud.incorrectFieldType = Incorrect Field Type
crud.constraintViolation = Save failed because a constraint was violated.

crud-create = Create
crud-delete = Delete
crud-edit = Edit

#Chart
chart.noDataMessage = No data available

#Connection providers
connectionProviders.test.successful = Connection tested successfully
connectionProviders.test.failed = Connection failed. Status: {0}. Error message: {1}
connectionProviders.save.duplicateDatabaseName = Another database with the same name already exists
connectionProviders.save.successful = Connection provider created successfully
connectionProviders.update.successful = Connection provider updated successfully
connectionProviders.delete.noneSelected=No Connection providers selected

#Many-to-many
com.manydesigns.portofino.pageactions.m2m.configuration.ViewType.CHECKBOXES = Check boxes (horizontal)
com.manydesigns.portofino.pageactions.m2m.configuration.ViewType.CHECKBOXES_VERTICAL = Check boxes (vertical)
com.manydesigns.portofino.pageactions.m2m.configuration.ViewType.LISTS = Lists
com.manydesigns.portofino.pageactions.m2m.configuration.addSelectionProvider.linkText =  Add a selection provider...
com.manydesigns.portofino.pageactions.m2m.configuration.addSelectionProvider.explanation = \
  (save this configuration to see it in selection lists)

m2m-update = Update

#Wizard
wizard.next = Next >>
wizard.prev = << Previous
wizard.finish = Finish

appwizard.showAdvancedOptions = Show advanced options
appwizard.jdbcDriver.help = Additional drivers can be downloaded and added to the shared libraries of your application server.
appwizard.error.duplicateDatabase = There is already a database named {0}
appwizard.error.schemas = Couldn''t read schema names from db: {0}
appwizard.error.schemas.noneSelected = Select at least a schema
appwizard.error.sync = Error in database synchronization: {0}
appwizard.error.updateModelFailed = Could not save model: {0}
appwizard.error.createPagesFailed = Could not create pages: {0}
appwizard.error.createDirectoryFailed = Couldn''t create directory {0}
appwizard.error.directoryExists = Directory exists, page not created ({0})
appwizard.error.userSetupFailed = Couldn''t set up user management: {0}
appwizard.warning.noRoot = No page will be generated
appwizard.warning.schemaExists = Schema {0} was already configured: existing pages won''t be updated

appwizard.existingConnectionProvider = Use an existing database connection
appwizard.orNewConnectionProvider = or create a new one (choose its type):
appwizard.newConnectionProvider = Create a new connection (choose type):
appwizard.schemas.found = Found schemas:
appwizard.schemas.confirmFinish = The connection provider will be configured, but no page will be auto-generated for it.
appwizard.roots.select = Select root tables

appwizard.userAndGroupTables = Users and groups tables

appwizard.userManagement.warning = Warning: configuring user management will overwrite the existing security.groovy

appwizard.userTable = Users table setup
appwizard.userTable.name = Users table
appwizard.userTable.encryption = password encryption algorithm
appwizard.userTable.encryption.plaintext = Plain text
appwizard.userTable.encryption.md5Base64 = MD5 (Base64 encoded)
appwizard.userTable.encryption.md5Hex = MD5 (Hex encoded)
appwizard.userTable.encryption.sha1Base64 = SHA-1 (Base64 encoded) - Portofino 3
appwizard.userTable.encryption.sha1Hex = SHA-1 (Hex encoded)
appwizard.userTable.idProperty = user id property
appwizard.userTable.nameProperty = username property
appwizard.userTable.passwordProperty = password property
appwizard.userTable.emailProperty = email property
appwizard.userTable.tokenProperty = token property

appwizard.groupTable = Groups tables setup
appwizard.groupTable.name = groups table
appwizard.groupTable.idProperty = group id property
appwizard.groupTable.nameProperty = group name property
appwizard.groupTable.adminGroupName = name of the administrators group

appwizard.userGroupTable.name = user-group join table
appwizard.userGroupTable.userLinkProperty = property that links to user
appwizard.userGroupTable.groupLinkProperty = property that links to group

appwizard.createPages.selectStrategy = Select the generation strategy:
appwizard.createPages.strategy.no = Don't generate anything
appwizard.createPages.strategy.auto = Automatic
appwizard.createPages.strategy.manual = Manual (choose which pages will be created)
appwizard.generateCalendar = Generate a calendar page

appwizard.finish.text = Press Finish to build the application. \
  This operation might require several minutes to complete.
appwizard.finished = Application created. Now browse it and customize it!
appwizard.warning.userTable.created = User management has been configured. Please edit the generated security.groovy \
  file to suit your environment and to remove the admin user hardcoded for the wizard. \
  Also note that pages filtered by user (My ...) most probably will not work for you \
  until you log out and log in again.

wizard.step = Step {0}
appwizard.step1.title = Connect to your database
appwizard.step2.title = Select the database schema(s) to import
appwizard.step3.title = Set up user management
appwizard.step3a.title = Customize user management
appwizard.step4.title = Generate pages
appwizard.step5.title = Build the application!

layouts.admin.connectionProviders = Connection Providers
layouts.admin.connectionProviders.create.create = Create connection provider
layouts.admin.connectionProviders.edit.title = Edit connection provider
layouts.admin.connectionProviders.list.available_platforms=Available database platforms
layouts.admin.connectionProviders.list.test=Test
layouts.admin.connectionProviders.list.synchronize=Synchronize
layouts.admin.connectionProviders.list.runWizard=Run wizard
layouts.admin.connectionProviders.read.detected_values=Detected values
layouts.admin.connectionProviders.read.configured_schemas=Configured schemas
layouts.admin.connectionProviders.read.schemas=Schemas

layouts.admin.tables.typeMismatchInTable = Detected type mismatch between column {0} ({1}) and column {2} ({3}) linked by foreign key {4}
layouts.admin.tables.typeMismatchInColumn = Detected type mismatch with column {0} ({1}) linked by foreign key {2}
layouts.admin.tables.invalidEntityName = Invalid entity name
layouts.admin.tables.invalidPropertyName = Invalid property name
layouts.admin.tables.invalidDateFormat = Invalid date format string. Consult the API docs for SimpleDateFormat.
layouts.admin.tables.editShortName = Edit
layouts.admin.tables.editShortName.title = Edit short name for table {0}
layouts.admin.tables.entityName = Entity name
layouts.admin.tables.entityName.help = If you leave this empty, the entity name will be generated automatically from the table name.
layouts.admin.tables.javaClass = Java class
layouts.admin.tables.shortName = Short name
layouts.admin.tables.shortName.help = Controls how objects loaded from this table are shown to the user in textual form.
layouts.admin.tables.classNotFound = Class not found: {0}
layouts.admin.tables.columnSkipped = Skipped column {0} with unknown type {1} (JDBC: {2})
layouts.admin.tables.databaseSlashSchema = Database/Schema
layouts.admin.tables.table = Table (Entity)
layouts.admin.tables.addSelectionProvider = Add selection provider
layouts.admin.tables.addSelectionProvider.title = Add a selection provider to table {0}
layouts.admin.tables.editSelectionProvider.title = Edit selection provider {0}
layouts.admin.tables.title = Edit table {0}
layouts.admin.tables.tableAndColumns = Table and columns
layouts.admin.tables.changeOrder = Change order
layouts.admin.tables.changeOrder.help = Drag the columns to change their order, then push the Ok button below to confirm or the Cancel button to restore the previous ordering. Note: your changes won't immediately affect the columns summary table; for that to happen, you need to save first.
layouts.admin.tables.editTable.foreignKeysAndSelectionProviders = Foreign keys and selection providers
layouts.admin.tables.editTable.columns = Columns
layouts.admin.tables.editTable.foreignKeys = Foreign keys
layouts.admin.tables.editTable.name = Name
layouts.admin.tables.editTable.onePropertyName = Property name (one side)
layouts.admin.tables.editTable.manyPropertyName = Property name (many side)
layouts.admin.tables.editTable.refTable = Referenced table
layouts.admin.tables.editTable.refColumns = Referenced columns
layouts.admin.tables.editTable.noForeignKeys = None available.
layouts.admin.tables.editTable.selectionProviders = Selection providers
layouts.admin.tables.editTable.database = Database
layouts.admin.tables.editTable.query = Query
layouts.admin.tables.editTable.noSelectionProviders = None available.
layouts.admin.tables.editColumn.title = Edit column {0}
layouts.admin.tables.selectionProvider.hqlSqlError = Please fill exactly one of the fields HQL, SQL
layouts.admin.tables.selectionProvider.columnNotFound = Column {0} not found
layouts.admin.tables.selectionProvider.alreadyExists = Selection provider {0} already exists
layouts.admin.reload-model.title = Reload the model from XML
layouts.admin.reload-model.text = If you have modified this application's model (portofino-model.xml) externally, you can reload it by pressing the Reload model button. Additionally, if you have added new changesets to the Liquibase file(s) of your schemas, they will be executed.